import useFetch from "../useFetch";
import { useRef, useState, useEffect } from "react";
import React from "react";
import { Card, CardHeader, CardTitle, CardContent } from "./components/ui/card";
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from "./components/ui/carousel";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./components/ui/select";
import { Button } from "./components/ui/button";

export default function App() {
  const { data, loading, error } = useFetch("https://api.tvmaze.com/shows/1?embed[]=cast&embed[]=episodes");
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedShow, setSelectedShow] = useState(null);

  const [selectedSeason, setSelectedSeason] = useState(1);
  const [filteredEpisodes, setFilteredEpisodes] = useState([]);
  const carouselRef = useRef(null);

  useEffect(() => {
    if (selectedSeason && data?._embedded?.episodes) {
      setFilteredEpisodes(data._embedded.episodes.filter(episode => episode.season === selectedSeason));
    }
  }, [selectedSeason, data]);

  const seasons = data?._embedded?.episodes
    ? Array.from(new Set(data._embedded.episodes.map(episode => episode.season))).map(seasonNumber => ({
        number: seasonNumber,
      }))
    : [];

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error.message}</p>;

  const openModal = (show) => {
    setSelectedShow(show);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedShow(null);
  };

  return (
    <div className="container mx-auto p-4 space-y-8">
      {!(isModalOpen && selectedShow) && 
      <>
        <h1 className="text-2xl font-bold mb-4">Shows</h1>
        
          {data && (
            <button
            onClick={() => openModal(data)}
            className="p-4 bg-blue-500 text-white rounded-lg"
            >
            {data.name}
            </button>
          )}
      </>
      }

      {isModalOpen && selectedShow && (

<div className=" rounded-md">

{data && (
  <>
    <Card className="max-w-lg bg-black text-white rounded-xl overflow-hidden border-none">
    <button onClick={closeModal} className="absolute text-white right-5 top-5 z-40">
              <img src="/Vector.png" alt="" className="w-6" />
            </button>
      
      <CardContent className="m-0 p-0 relative">

        
        <img src={data.image?.original} alt={data.name} className="w-full" />

        <CardHeader className=" w-full absolute bottom-0 bg-gradient-to-t from-black">
        <CardTitle className="text-xl">{data.name}</CardTitle>
        <p>{data.genres.join(", ")}</p>
        <p>{data.runtime} minutes</p>
        </CardHeader>

       </CardContent>

       <CardContent className=" flex flex-col gap-4">

        <div className="flex justify-center items-center gap-2">
          <Button className="w-1/2">Continue Watching</Button>
          <Button className="bg-black bg-opacity-0 border"><img src="/Icon-Save.svg" alt="" /></Button>
          <Button className="bg-black bg-opacity-0 border"><img src="/Icon-Like.svg" alt="" /></Button>
          <Button className="bg-black bg-opacity-0 border"><img src="/Icon-DL.svg" alt="" /></Button>
        </div>


        <p><span dangerouslySetInnerHTML={{ __html: data.summary }} /></p>

<Carousel>
  <CarouselContent>
    {data._embedded?.cast.map((member, index) => (
      <CarouselItem key={index} className="flex items-center justify-center">
        <div className="flex items-center">
          <img src={member.person.image?.medium} alt={member.person.name} className="w-16 rounded-lg mr-4" />
          <div>
            <p className="font-semibold">{member.person.name}</p>
            <p className="text-gray-600">{member.character.name}</p>
          </div>
        </div>
      </CarouselItem>
    ))}
  </CarouselContent>
  <CarouselPrevious className="-left-2 opacity-100 disabled:opacity-0" />
  <CarouselNext className="-right-2 opacity-100 disabled:opacity-0" />
</Carousel>


<div id="Carrousel_Episode" className="text-white">
                <div className="p-4 flex justify-between">
                  <h3 className="text-2xl font-bold">
          {` Episodes 1 - ${filteredEpisodes.length} `}
                </h3>        
                  <Select onValueChange={(value) => setSelectedSeason(Number(value))}>
                    <SelectTrigger id="season-select" className="bg-black text-white p-2 rounded w-1/3">
                      <SelectValue placeholder="Season 1" />
                    </SelectTrigger>
                    <SelectContent>
                      {seasons.map((season) => (
                        <SelectItem key={season.id} value={season.number.toString()}>
                          Season {season.number}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
               </div>
                <Carousel>
                  <CarouselContent ref={carouselRef} className="px-4 flex ">
                    {filteredEpisodes.map((episode, index) => (
                      <CarouselItem
                        key={index}
                        className="flex-none w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/5 flex flex-col items-center justify-center relative"
                      >
<img
                          src={episode.image?.original}
                          alt={episode.name}
                          className=" h-auto object-cover rounded"
                        />
                                      <div className="absolute bottom-0 left-4 bg-gradient-to-t from-black p-4 rounded">
                          <p className=" font-bold">Episode {episode.number}</p>
                          <p className="text-gray-300">
                            <span
                              dangerouslySetInnerHTML={{
                                __html: episode?.summary
                                  ? (() => {
                                      const words = episode.summary.split(" ");
                                      return words.length > 12
                                        ? words.slice(0, 12).join(" ") + "..."
                                        : episode.summary;
                                    })()
                                  : "",
                              }}
                            />
                          </p>
                        </div>
                      </CarouselItem>
                    ))}
                  </CarouselContent>
                  <CarouselPrevious className="-left-2 opacity-100 disabled:opacity-0" />
                  <CarouselNext className="-right-2 opacity-100 disabled:opacity-0"  />
                </Carousel>
      </div>



            </CardContent>
          </Card> 
        </>

      )}
    </div>

)}
</div>

  );
}
