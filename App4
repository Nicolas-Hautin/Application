import useFetch from "../useFetch";
import { useRef, useState, useEffect } from "react";
import React from "react";
import { Card, CardHeader, CardTitle, CardContent } from "./components/ui/card";
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from "./components/ui/carousel";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "./components/ui/select";
import { Button } from "./components/ui/button";

export default function App() {
  const [searchQuery, setSearchQuery] = useState("");
  const [shows, setShows] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedShow, setSelectedShow] = useState(null);
  const [selectedSeason, setSelectedSeason] = useState(1);
  const [filteredEpisodes, setFilteredEpisodes] = useState([]);
  const carouselRef = useRef(null);

  // Fetch all shows initially and on search query change
  useEffect(() => {
    const url = searchQuery
      ? `https://api.tvmaze.com/search/shows?q=${searchQuery}`
      : "https://api.tvmaze.com/shows";

    fetch(url)
      .then((response) => response.json())
      .then((data) => {
        const showList = searchQuery ? data.map((item) => item.show) : data;
        setShows(showList);
      })
      .catch((error) => console.error("Error fetching shows:", error));
  }, [searchQuery]);

  // Fetch show details when a show is selected
  useEffect(() => {
    if (selectedShow) {
      fetch(`https://api.tvmaze.com/shows/${selectedShow.id}?embed[]=cast&embed[]=episodes`)
        .then((response) => response.json())
        .then((data) => {
          setSelectedShow(data);
          setFilteredEpisodes(data._embedded.episodes.filter(episode => episode.season === selectedSeason));
        })
        .catch((error) => console.error("Error fetching show details:", error));
    }
  }, [selectedShow, selectedSeason]);

  const seasons = selectedShow?._embedded?.episodes
    ? Array.from(new Set(selectedShow._embedded.episodes.map(episode => episode.season))).map(seasonNumber => ({
        number: seasonNumber,
      }))
    : [];

  const openModal = (show) => {
    setSelectedShow(show);
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedShow(null);
  };

  return (
    <div className="container mx-auto p-4 space-y-8">
      <div className="mb-4">
        <input
          type="text"
          placeholder="Search for a show..."
          className="p-2 border border-gray-300 rounded w-full"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
      </div>

      {!(isModalOpen && selectedShow) && (
        <>
          <h1 className="text-2xl font-bold mb-4">Shows</h1>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
            {shows.map((show) => (
              <div
                key={show.id}
                onClick={() => openModal(show)}
                className="cursor-pointer p-2 bg-gray-800 text-white rounded-lg hover:bg-gray-700"
              >
                <img src={show.image?.medium} alt={show.name} className="w-full rounded-lg mb-2" />
                <p className="font-semibold">{show.name}</p>
              </div>
            ))}
          </div>
        </>
      )}

      {isModalOpen && selectedShow && (
        <div className="rounded-md">
          <Card className="max-w-lg bg-black text-white rounded-xl overflow-hidden border-none">
            <button onClick={closeModal} className="absolute text-white right-5 top-5 z-40">
              <img src="/Vector.png" alt="Close" className="w-6" />
            </button>

            <CardContent className="m-0 p-0 relative">
              <img src={selectedShow.image?.original} alt={selectedShow.name} className="w-full" />
              <CardHeader className="w-full absolute bottom-0 bg-gradient-to-t from-black">
                <CardTitle className="text-xl">{selectedShow.name}</CardTitle>
                <p>{selectedShow.genres.join(", ")}</p>
                <p>{selectedShow.runtime} minutes</p>
              </CardHeader>
            </CardContent>

            <CardContent className="flex flex-col gap-4">
              <div className="flex justify-center items-center gap-2">
                <Button className="w-1/2">Continue Watching</Button>
                <Button className="bg-black bg-opacity-0 border">
                  <img src="/Icon-Save.svg" alt="Save" />
                </Button>
                <Button className="bg-black bg-opacity-0 border">
                  <img src="/Icon-Like.svg" alt="Like" />
                </Button>
                <Button className="bg-black bg-opacity-0 border">
                  <img src="/Icon-DL.svg" alt="Download" />
                </Button>
              </div>

              <p>
                <span dangerouslySetInnerHTML={{ __html: selectedShow.summary }} />
              </p>

              <Carousel>
                <CarouselContent>
                  {selectedShow._embedded?.cast.map((member, index) => (
                    <CarouselItem key={index} className="flex items-center justify-center">
                      <div className="flex items-center">
                        <img src={member.person.image?.medium} alt={member.person.name} className="w-16 rounded-lg mr-4" />
                        <div>
                          <p className="font-semibold">{member.person.name}</p>
                          <p className="text-gray-600">{member.character.name}</p>
                        </div>
                      </div>
                    </CarouselItem>
                  ))}
                </CarouselContent>
                <CarouselPrevious className="-left-2 opacity-100 disabled:opacity-0" />
                <CarouselNext className="-right-2 opacity-100 disabled:opacity-0" />
              </Carousel>

              <div id="Carrousel_Episode" className="text-white">
                <div className="p-4 flex justify-between">
                  <h3 className="text-2xl font-bold">{`Episodes 1 - ${filteredEpisodes.length}`}</h3>
                  <Select onValueChange={(value) => setSelectedSeason(Number(value))}>
                    <SelectTrigger id="season-select" className="bg-black text-white p-2 rounded w-1/3">
                      <SelectValue placeholder="Season 1" />
                    </SelectTrigger>
                    <SelectContent>
                      {seasons.map((season) => (
                        <SelectItem key={season.number} value={season.number.toString()}>
                          Season {season.number}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <Carousel>
                  <CarouselContent ref={carouselRef} className="px-4 flex">
                    {filteredEpisodes.map((episode, index) => (
                      <CarouselItem
                        key={index}
                        className="flex-none w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/5 flex flex-col items-center justify-center relative"
                      >
                        <img src={episode.image?.original} alt={episode.name} className="h-auto object-cover rounded" />
                        <div className="absolute bottom-0 left-4 bg-gradient-to-t from-black p-4 rounded">
                          <p className="font-bold">Episode {episode.number}</p>
                          <p className="text-gray-300">
                            <span
                              dangerouslySetInnerHTML={{
                                __html: episode?.summary
                                  ? (() => {
                                      const words = episode.summary.split(" ");
                                      return words.length > 12 ? words.slice(0, 12).join(" ") + "..." : episode.summary;
                                    })()
                                  : "",
                              }}
                            />
                          </p>
                        </div>
                      </CarouselItem>
                    ))}
                  </CarouselContent>
                  <CarouselPrevious className="-left-2 opacity-100 disabled:opacity-0" />
                  <CarouselNext className="-right-2 opacity-100 disabled:opacity-0" />
                </Carousel>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
