import React, { useState, useEffect } from 'react';
import Modal from './components/ui/modal';
import { Button } from './components/ui/button';

const SearchBar = () => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [noResults, setNoResults] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedShow, setSelectedShow] = useState(null);

  useEffect(() => {
    // Récupérer 30 émissions par défaut lorsque le composant est monté
    fetchShows();
  }, []);

  const fetchShows = async () => {
    const url = query.trim() === ''
      ? 'https://api.tvmaze.com/shows?page=1&embed[]=episodes&embed[]=cast'
      : `https://api.tvmaze.com/search/shows?q=${query}&embed[]=episodes&embed[]=cast?page=1&embed[]=episodes&embed[]=cast`;
    const response = await fetch(url);
    const data = await response.json();
    const shows = query.trim() === '' ? data.slice(0, 300) : data.map(item => item.show);
    setResults(shows);
    setNoResults(shows.length === 0);
  };

  const handleSearch = () => {
    fetchShows();
  };

  const handleShowClick = (show) => {
    // Ouvrir la modale avec les détails de l'émission sélectionnée
    setSelectedShow(show);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    // Fermer la modale
    setIsModalOpen(false);
    setSelectedShow(null);
  };

  return (
    <div className="font-rubik bg-black">
      <div className="flex justify-between items-center p-5">
        <div className='flex justify-center items-center'>
          <img src="/logo.png" alt="Logo" />
        </div>
        <div className="relative w-64 flex items-center gap-4 ml-4 sm:ml-0">
          <input
            type="text"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder="Search for shows"
            className="border w-full p-2 rounded bg-black text-white border-white pr-10"
          />
          <button
            onClick={handleSearch}
            className="absolute inset-y-0 right-0 flex items-center pr-2"
          >
            <img src="/search.svg" alt="Search" className="h-6 w-6 text-white" />
          </button>
        </div>
        <div className='flex gap-2'>
          <Button className="hidden md:block bg-black border border-white p-2">Sign up</Button>
          <Button className="hidden md:block bg-green-600 p-2">Login</Button>
        </div>
      </div>
      {noResults ? (
        <p className="text-red-700">Pas de film pour "{query}".</p>
      ) : (
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-9 gap-4 m-2">
          {results.map((result, index) => (
            <div
              key={index}
              className="rounded cursor-pointer relative"
              onClick={() => handleShowClick(result)}
            >
              {/* Si l'image n'est pas trouvée */}
              {result.image && result.image.medium ? (
                <img src={result.image.medium} alt={result.name} className="w-full rounded" />
              ) : (
                <div className="w-full h-64 bg-gray-200 flex items-center justify-center rounded">
                  <span className="text-gray-500">No Image</span>
                </div>
              )}
              <div className='absolute bottom-0 w-full bg-gradient-to-t from-black p-4'>
                <h3 className="text-md text-white">{result.name}</h3>
                <img src="/star.svg" alt="star" className='w-6'/>
              </div>
            </div>
          ))}
        </div>
      )}
      <Modal show={selectedShow} onClose={handleCloseModal} />
    </div>
  );
};

export default SearchBar;
