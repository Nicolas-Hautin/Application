import { useFetch } from "/useFetch";
import { useRef, useState, useEffect } from "react";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

export default function App() {
  const { data: episodes, isLoading, error } = useFetch(
    "https://api.tvmaze.com/shows/2/episodes"
  );

  const [selectedSeason, setSelectedSeason] = useState(1); // Par défaut la saison 1
  const [filteredEpisodes, setFilteredEpisodes] = useState([]);
  const carouselRef = useRef(null);

  useEffect(() => {
    if (selectedSeason && episodes) {
      setFilteredEpisodes(episodes.filter(episode => episode.season === selectedSeason));
    }
  }, [selectedSeason, episodes]);

  // Dériver les saisons à partir des données des épisodes
  const seasons = episodes
    ? Array.from(new Set(episodes.map(episode => episode.season))).map(seasonNumber => ({
        number: seasonNumber,
        id: seasonNumber,
      }))
    : [];

  if (isLoading) return <div>Chargement...</div>;
  if (error) return <div>Erreur : {error}</div>;

  return (
    <div>
      <div id="Carrousel_Episode" className="text-white">
      <div className="p-4 flex justify-between">
      <h3 className="text-2xl font-bold text-black">
          {`1 - ${filteredEpisodes.length} Episodes`}
        </h3>        
        <Select onValueChange={(value) => setSelectedSeason(Number(value))}>
          <SelectTrigger id="season-select" className="bg-black text-white p-2 rounded w-1/4">
            <SelectValue placeholder="Saison 1" />
          </SelectTrigger>
          <SelectContent>
            {seasons.map((season) => (
              <SelectItem key={season.id} value={season.number.toString()}>
                Saison {season.number}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      <Carousel>
        <CarouselContent ref={carouselRef} className="px-4 flex ">
          {filteredEpisodes.map((episode, index) => (
            <CarouselItem
              key={index}
              className="flex-none w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/5 flex flex-col items-center justify-center relative"
            >
              <img
                src={episode.image?.original}
                alt={episode.name}
                className=" h-auto object-cover rounded"
              />
              <div className="absolute bottom-0 left-4 bg-gradient-to-t from-black p-4 rounded">
                <p className=" font-bold">Episode {episode.number}</p>
                <p className="text-gray-300">
                  <span
                    dangerouslySetInnerHTML={{
                      __html: episode?.summary
                        ? (() => {
                            const words = episode.summary.split(" ");
                            return words.length > 12
                              ? words.slice(0, 12).join(" ") + "..."
                              : episode.summary;
                          })()
                        : "",
                    }}
                  />
                </p>
              </div>
            </CarouselItem>
          ))}
        </CarouselContent>
        <CarouselPrevious className="bg-black border-0 disabled:opacity-0" />
        <CarouselNext className="bg-black border-0 disabled:opacity-0" />
      </Carousel>
      </div>
      </div>
  );
}
